# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main", "development" ]
    paths:
      - '**.cpp'
      - '**.hpp'
      - '**.c'
      - '**.h'
      - '**.sc'
      - 'CMakeLists.txt'
      - '.gitmodules'
  pull_request:
    branches: [ "main", "development" ]
    paths:
      - '**.cpp'
      - '**.hpp'
      - '**.c'
      - '**.h'
      - '**.sc'
      - 'CMakeLists.txt'
      - '.gitmodules'

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        build_type: [ Release ]
        c_compiler: [ gcc, clang, cl ]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - name: Get dependencies
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y libx11-dev libwayland-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev freeglut3-dev libxkbcommon-dev

      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          ref: ${{ github.ref }}

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      # thanks https://github.com/saxbophone/CPP20-Cross-Platform-Template/blob/6991098e7f243ae9c6477c601953dd132f499e53/.github/workflows/continuous-integration.yml#L31-L62
      - name: Cache CMake dependency source code
        uses: actions/cache@v4
        env:
          cache-name: cache-cmake-dependency-sources
        with:
          # CMake cache is at ${{github.workspace}}/build/_deps but we only will cache folders ending in '-src' to cache source code
          path: ${{ steps.strings.outputs.build-output-dir }}/_deps/*-src
          # Cache hash is dependent on CMakeLists files anywhere as these can change what's in the cache, as well as cmake modules files
          key: ${{ env.cache-name }}-${{ hashFiles('**/CMakeLists.txt', 'cmake/**') }}
          # it's acceptable to reuse caches for different CMakeLists content if exact match is not available and unlike build caches, we
          # don't need to restrict these by OS or compiler as it's only source code that's being cached
          restore-keys: |
            ${{ env.cache-name }}-
      # end of borrowed code

      - name: Setup MSVC Developer Command Prompt
        if: ${{ matrix.os == 'windows-latest' }}
        uses: TheMrMilchmann/setup-msvc-dev@v4.0.0
        with:
          arch: x64

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.job }}-${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.cpp_compiler }}

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_C_COMPILER_LAUNCHER=ccache
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          -G Ninja
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --target CPP_Engine

      - name: Install
        if: github.ref == 'refs/heads/main'
        run: cmake --install ${{ steps.strings.outputs.build-output-dir }} --component CPP_Engine

      - name: Upload build artifacts
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-${{ matrix.os }}-${{ matrix.c_compiler }}
          path: ${{ steps.strings.outputs.build-output-dir }}/package
